#version 450

layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec4 aTexcoord;

// Transform Uniforms
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

// Varying
// Per-Vertex: final color
//out vec4 vColor;
// Per-Fragment: individual components
out vec4 vNormal;

out vec4 vPosition;
out vec4 vTexcoord;
out vec4 vPos_camera;

void main() {
	/*
	// Object > World
	vec4 pos_world = uModelMat * aPosition;
	// World > View
	vec4 pos_camera = uViewMat * pos_world;
	// View > Clip
	vec4 pos_clip = uProjMat * pos_camera;
	*/
	
	// Final Position Pipeline
	vPosition = aPosition;
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_camera = modelViewMat * aPosition;
	vec4 pos_clip = uProjMat * pos_camera;
	vPos_camera = pos_camera;
	// Required to set this value
    gl_Position = pos_clip;
    //gl_Position = uProjMat * modelViewMat * aTexcoord;
    
    // Normal Pipeline
    mat3 normalMatrix = transpose(inverse(mat3(modelViewMat)));
    //vec4 norm_camera = normalMatrix * vec4(aNormal, 0.0);
    vec3 norm_camera = normalMatrix * aNormal;
    // Per-Vertex
    //vColor = vec4(1.0, 0.5, 0.0, 1.0);
    //vColor = vec4(aNormal * 0.5 + 0.5, 1.0);
    // Per-Fragment
    //vNormal = vec4(aNormal, 1.0);
    vNormal = vec4(norm_camera, 0.0);
    
    // Texcoord Pipeline
    mat4 atlasMap = mat4(1.0, 0.0, 0.0, 0.0,
    					 0.0, 1.0, 0.0, 0.0,
    					 0.0, 0.0, 1.0, 0.0,
    					 0.0, 0.0, 0.0, 1.0);
    vec4 uv_atlas = atlasMap * aTexcoord;
    //vTexcoord = aTexcoord;
    vTexcoord = uv_atlas;
}