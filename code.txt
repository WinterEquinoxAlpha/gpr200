// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

// waves: make the texture do the wave
//    inputPos:		the normalized position of the input pixel [0, 1)
//    time:			time since start
vec2 waves(in vec2 inputPos, in float time) {
    vec2 outputPos;	// A vec2 storing the output pixel normalized coordinate [0, 1)
    outputPos = inputPos; // Set the output coordinate to the input one so as to modify it
    outputPos.y += 0.1 * sin(time + 5.0 * inputPos.x);	// Distort the texture y position by shifting it up and down by the sine of the time plus the current pixel x position
    outputPos.x += 0.1 * cos(time + 5.0 * inputPos.y);	// Distort the texture x position by shifting it left and right by the sine of the time plus the current pixel y position
    return outputPos;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in float time)
{
    
    // Variable calculations
    sCoord px = vp.pixelCoord;	// A coordinate (vec2) storing the current pixel location
    sDCoord res = iChannelResolution[0].xy;	// A measurement (vec2) storing the resolution of the resolution of the texture
    sScalar ratio = res.y * vp.resolutionInv.y;	// A scalar (float) storing the ratio of the texture y resolution to the viewport y resolution
    sCoord loc = px / res;	// A coordinate (vec2) storing the normalized pixel location [0, 1)
	
	
    // Cross Fade
	loc = ratio * loc;	// Fill the viewport with the texture, i.e. zoom the texture in so it is always the same size as the viewport
    vec4 startTexture = texture(iChannel0, loc);	// The starting texture
    vec4 endTexture = texture(iChannel1, loc);	// The ending texture
    return mix(startTexture, endTexture, min(1.0, time));	// Return the color (vec4) at the calculated pixel of the texture. The location of the pixel is a range [0, 1)
    
    
    /*
    // Waves
	loc = ratio * loc;	// Fill the viewport with the texture, i.e. zoom the texture in so it is always the same size as the viewport
    loc = waves(loc, time);	// Sets the location the on the texture pixel is "looking at" to the output from the waves function
    return texture(iChannel0, loc);	// Return the color (vec4) at the calculated pixel of the texture. The location of the pixel is a range [0, 1)
	*/
    
    /*
    // Shading
    vec3 surfacePosition = vec3(loc, 0.0);
    vec3 surfaceNormal = vec3(0.0, 0.0, 1.0);
    vec2 resInv = 1.0 / res;
    vec3 lightPosition = vec3(0.5 * cos(2.0 * time) + 0.5 * vp.resolution.x * resInv.x, 0.5 * sin(2.0 * time) + 0.5 * vp.resolution.y * resInv.y, 0.2);
    vec4 lightColor = vec4(1.0, 1.0, 1.0, 1.0);
    float intensity = 10.0;
    
    // Lambertian reflectance
    // Diffuse coefficient
    vec3 ls = lightPosition - surfacePosition;
    float d = sqrt(lengthSq(ls));
    vec3 lightVector = ls / d;
    float diffuseCoefficient = dot(surfaceNormal, lightVector);
    // Attenuated intensity
    float intensityInv = 1.0 / intensity;
    float attenuatedIntensity = 1.0 / (1.0 + d * intensityInv + (d * d) * (intensityInv * intensityInv));
    // Diffuse intensity
    float diffuseIntensity = diffuseCoefficient * attenuatedIntensity;
    
    loc = ratio * loc;	// Fill the viewport with the texture, i.e. zoom the texture in so it is always the same size as the viewport
    vec4 surfaceColor = texture(iChannel0, loc);
    vec4 finalColor = diffuseIntensity * surfaceColor * lightColor;
    return finalColor;
	*/
    
    /*
    // Cube Map
    vec3 loc = ray.direction.xyz;
    float angleX = 0.0;
    mat3 rotationX = mat3(
        vec3(1.0, 0.0, 0.0),
        vec3(0.0, cos(angleX), -sin(angleX)),
        vec3(0.0, sin(angleX), cos(angleX))
    );
    float angleY = time;
    mat3 rotationY = mat3(
        vec3(cos(angleY), 0.0, sin(angleY)),
        vec3(0.0, 1.0, 0.0),
        vec3(-sin(angleY), 0.0, cos(angleY))
    );
    float angleZ = 0.0;
    mat3 rotationZ = mat3(
        vec3(cos(angleZ), -sin(angleZ), 0.0),
        vec3(sin(angleZ), cos(angleZ), 0.0),
        vec3(0.0, 0.0, 1.0)
    );
    loc *= rotationX;
    loc *= rotationY;
    loc *= rotationZ;
    
    loc.xy = waves(loc.xy, time);
    
    vec4 cubeTexture = texture(iChannel2, loc);
    return cubeTexture;
	*/
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iTime);
}