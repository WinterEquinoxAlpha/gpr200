// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

// Code by Peter Shirley in Ray Tracing in One Weekend
// https://raytracing.github.io/books/RayTracingInOneWeekend.html
// modified by Michael Kashian
float vecLenSq(in vec3 v) {
    return (v.x * v.x + v.y * v.y + v.z * v.z);
}

// Code by Peter Shirley in Ray Tracing in One Weekend
// https://raytracing.github.io/books/RayTracingInOneWeekend.html
// modified by Michael Kashian
float vecLen(in vec3 v) {
    return sqrt(vecLenSq(v));
}

// Code by Peter Shirley in Ray Tracing in One Weekend
// https://raytracing.github.io/books/RayTracingInOneWeekend.html
// modified by Michael Kashian
vec3 unit_vector(in vec3 v) {
    float vLen = 1.0 / vecLen(v);
    v.x *= vLen;
    v.y *= vLen;
    v.z *= vLen;
    return v;
}

// Creates a ray struct to hold two vec3s
struct ray {
   vec3 origin;
   vec3 direction;
};

// Creates a camra struct to hold four vec3s
struct camera {
    vec3 origin;
    vec3 lower_left_corner;
    vec3 horizontal;
    vec3 vertical;
};

// Code by Peter Shirley in Ray Tracing in One Weekend
// https://raytracing.github.io/books/RayTracingInOneWeekend.html
// modified by Michael Kashian
float hit_sphere(in vec3 center, in float radius, in vec3 rayDirection, in vec3 rayOrigin) {
    // Determines if a ray will intersect the sphere
    vec3 oc = rayOrigin - center;
    float a = vecLenSq(rayDirection);
    float half_b = dot(oc, rayDirection);
    float c = vecLenSq(oc) - radius * radius;
    float discriminant = half_b * half_b - a * c;
    
    if (discriminant < 0.0) {
        return -1.0;
    } else {
        return (-half_b - sqrt(discriminant) ) / a;
    }
}

// Code by Peter Shirley in Ray Tracing in One Weekend
// https://raytracing.github.io/books/RayTracingInOneWeekend.html
// modified by Michael Kashian
vec3 set_face_normal(in vec3 rayDirection, in vec3 rayOrigin, vec3 outward_normal) {
    bool front_face = dot(rayDirection, outward_normal) < 0.0;
    return (front_face ? outward_normal :-outward_normal);
}

// Code byPatricio Gonzalez Vivo & Jen Lowe in The Book of Shaders
// https://thebookofshaders.com/10/
// modified by Michael Kashian
float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

// Code by Peter Shirley in Ray Tracing in One Weekend
// https://raytracing.github.io/books/RayTracingInOneWeekend.html
// modified by Michael Kashian
ray get_ray(in camera cam, in float u, in float v) {
    return ray(cam.origin, cam.lower_left_corner + u * cam.horizontal + v * cam.vertical - cam.origin);
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec3 rayDirection, in vec3 rayOrigin, in int samples_per_pixel, in vec2 fragCoord, in vec2 resolution)
{
    // Draws the background gradient
    vec3 pixelColor;
    vec3 unit_direction = unit_vector(rayDirection);
    float t = 0.5*(unit_direction.y + 1.0);
    pixelColor = (1.0-t)*vec3(1.0, 1.0, 1.0) + t*vec3(0.5, 0.7, 1.0);
    
    // Draws the ground
    t = hit_sphere(vec3(0.0, -100.5, -1.0), 100.0, rayDirection, rayOrigin);
    if (t > 0.0) {
        pixelColor = vec3(0.5, 1.0, 0.51);
    }
    
    // Draws the sphere
    t = hit_sphere(vec3(0.0, 0.0, -1.0), 0.5, rayDirection, rayOrigin);
    if (t > 0.0) {
        vec3 N = unit_vector((rayOrigin + t * rayDirection) - vec3(0.0, 0.0, -1.0));
        pixelColor =  0.5 * vec3(N.x + 1.0, N.y + 1.0, N.z + 1.0);
    }
    
    return vec4(pixelColor, 1.0);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;
	int samples_per_pixel = 100;
    
    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);
    
    // Code by Peter Shirley in Ray Tracing in One Weekend
    // https://raytracing.github.io/books/RayTracingInOneWeekend.html
    // modified by Michael Kashian
    // Variables for the camera
    float aspect_ratio = 16.0 / 9.0;
    float viewport_height = 2.0;
    float viewport_width = aspect_ratio * viewport_height;
    float focal_length = 1.0;
    vec3 origin = vec3(0.0, 0.0, 0.0);
    vec3 horizontal = vec3(viewport_width, 0.0, 0.0);
    vec3 vertical = vec3(0.0, viewport_height, 0.0);
    vec3 lower_left_corner = origin - 0.5 * horizontal - 0.5 * vertical - vec3(0.0, 0.0, focal_length);
    
	camera cam = camera(origin, horizontal, vertical, lower_left_corner);
    
    // color
    // Code by Peter Shirley in Ray Tracing in One Weekend
    // https://raytracing.github.io/books/RayTracingInOneWeekend.html
    // modified by Michael Kashian
    // Attempted to add antialiasing
    vec4 pixel_color = vec4(0.0, 0.0, 0.0, 1.0);
    for (int s = 0; s < samples_per_pixel; ++s) {
        float u = (fragCoord.x + random(fragCoord)) / (iResolution.x - 1.0);
        float v = (fragCoord.y + random(fragCoord)) / (iResolution.y - 1.0);
        ray r = get_ray(cam, u, v);
        pixel_color = calcColor(r.direction, r.origin, samples_per_pixel, fragCoord, iResolution.xy);
    }
    
    fragColor = calcColor(rayDirection.xyz, rayOrigin.xyz, samples_per_pixel, fragCoord, iResolution.xy);
    //fragColor = pixel_color;
}