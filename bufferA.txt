// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in samplerCube Channel0)
{
    // Cube Map
    vec3 loc = ray.direction.xyz;
	// Rotation about the y axis
    float angleY = iTime;
    float sa = sin(angleY);
    float ca = cos(angleY);
    mat3 rotationY = mat3(
        vec3(ca, 0.0, sa),
        vec3(0.0, 1.0, 0.0),
        vec3(-sa, 0.0, ca)
    );
	// Multiply the location by the rotation matrices
    loc *= rotationY;
    
    vec4 cubeTexture = texture(Channel0, loc);	// Get the texture at the location
    return cubeTexture;
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iChannel0);
}
