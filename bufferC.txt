void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    sCoord uv = fragCoord / iChannelResolution[0].xy;	// Normalized texture coordinates
    
    // Most efficient
    vec2 ps = 0.5 * (1.0 / iResolution.xy);		// Half pixel size in texture coordinates
    // Retrieve the colors from the texture in a horrizontal line and multiply them by the kernel
    vec4 col1 = kernel[0] * texture(iChannel0, vec2(uv.x - 3.0 * ps.x, uv.y));
    vec4 col2 = kernel[1] * texture(iChannel0, vec2(uv.x - ps.x, uv.y));
    vec4 col3 = kernel[2] * texture(iChannel0, vec2(uv.x + ps.x, uv.y));
    vec4 col4 = kernel[3] * texture(iChannel0, vec2(uv.x + 3.0 * ps.x, uv.y));
    fragColor = 0.125 * (col1 + col2 + col3 + col4);	// Combine the colors
    
    // More efficient
    /*
    vec2 ps = 1.0 / iResolution.xy;
    vec4 col1 = kernel[0] * texture(iChannel0, vec2(uv.x - 2.0 * ps.x, uv.y));
    vec4 col2 = kernel[1] * texture(iChannel0, vec2(uv.x - ps.x, uv.y));
    vec4 col3 = kernel[2] * texture(iChannel0, vec2(uv.x, uv.y));
    vec4 col4 = kernel[3] * texture(iChannel0, vec2(uv.x + ps.x, uv.y));
    vec4 col5 = kernel[4] * texture(iChannel0, vec2(uv.x + 2.0 * ps.x, uv.y));
    fragColor = 0.0625 * (col1 + col2 + col3 + col4 + col5);
    */
    
    // Very inefficient
    /*
    vec4 col1 = (kernel[0] * kernel[0]) * texture(iChannel0, vec2(uv.x - 2.0 * ps.x, uv.y + 2.0 * ps.y));
    vec4 col2 = (kernel[0] * kernel[1]) * texture(iChannel0, vec2(uv.x - ps.x, uv.y + 2.0 * ps.y));
    vec4 col3 = (kernel[0] * kernel[2]) * texture(iChannel0, vec2(uv.x, uv.y + 2.0 * ps.y));
    vec4 col4 = (kernel[0] * kernel[3]) * texture(iChannel0, vec2(uv.x + ps.x, uv.y + 2.0 * ps.y));
    vec4 col5 = (kernel[0] * kernel[4]) * texture(iChannel0, vec2(uv.x + 2.0 * ps.x, uv.y + 2.0 * ps.y));
    vec4 col6 = (kernel[1] * kernel[0]) * texture(iChannel0, vec2(uv.x - 2.0 * ps.x, uv.y + ps.y));
    vec4 col7 = (kernel[1] * kernel[1]) * texture(iChannel0, vec2(uv.x - ps.x, uv.y + ps.y));
    vec4 col8 = (kernel[1] * kernel[2]) * texture(iChannel0, vec2(uv.x, uv.y + ps.y));
    vec4 col9 = (kernel[1] * kernel[3]) * texture(iChannel0, vec2(uv.x + ps.x, uv.y + ps.y));
    vec4 col10 = (kernel[1] * kernel[4]) * texture(iChannel0, vec2(uv.x + 2.0 * ps.x, uv.y + ps.y));
    vec4 col11 = (kernel[2] * kernel[0]) * texture(iChannel0, vec2(uv.x - 2.0 * ps.x, uv.y));
    vec4 col12 = (kernel[2] * kernel[1]) * texture(iChannel0, vec2(uv.x - ps.x, uv.y));
    vec4 col13 = (kernel[2] * kernel[2]) * texture(iChannel0, vec2(uv.x, uv.y));
    vec4 col14 = (kernel[2] * kernel[3]) * texture(iChannel0, vec2(uv.x + ps.x, uv.y));
    vec4 col15 = (kernel[2] * kernel[4]) * texture(iChannel0, vec2(uv.x + 2.0 * ps.x, uv.y));
    vec4 col16 = (kernel[3] * kernel[0]) * texture(iChannel0, vec2(uv.x - 2.0 * ps.x, uv.y - ps.y));
    vec4 col17 = (kernel[3] * kernel[1]) * texture(iChannel0, vec2(uv.x - ps.x, uv.y - ps.y));
    vec4 col18 = (kernel[3] * kernel[2]) * texture(iChannel0, vec2(uv.x, uv.y - ps.y));
    vec4 col19 = (kernel[3] * kernel[3]) * texture(iChannel0, vec2(uv.x + ps.x, uv.y - ps.y));
    vec4 col20 = (kernel[3] * kernel[4]) * texture(iChannel0, vec2(uv.x + 2.0 * ps.x, uv.y - ps.y));
    vec4 col21 = (kernel[4] * kernel[0]) * texture(iChannel0, vec2(uv.x - 2.0 * ps.x, uv.y - 2.0 * ps.y));
    vec4 col22 = (kernel[4] * kernel[1]) * texture(iChannel0, vec2(uv.x - ps.x, uv.y - 2.0 * ps.y));
    vec4 col23 = (kernel[4] * kernel[2]) * texture(iChannel0, vec2(uv.x, uv.y - 2.0 * ps.y));
    vec4 col24 = (kernel[4] * kernel[3]) * texture(iChannel0, vec2(uv.x + ps.x, uv.y - 2.0 * ps.y));
    vec4 col25 = (kernel[4] * kernel[4]) * texture(iChannel0, vec2(uv.x + 2.0 * ps.x, uv.y - 2.0 * ps.y));
    fragColor = (1.0 / 256.0) * (col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20 + col21 + col22 + col23 + col24 + col25);
	*/
}